import React, { useState, useRef, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Volume2, Send, User, Bot } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

export const ChineseTutorBot = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [userName, setUserName] = useState('');
  const [isNameSet, setIsNameSet] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const speakChinese = (text: string) => {
    if ('speechSynthesis' in window) {
      // Cancel any existing speech
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Try to find Chinese voice
      const voices = window.speechSynthesis.getVoices();
      const chineseVoice = voices.find(voice => 
        voice.lang.includes('zh-CN') || voice.lang.includes('zh')
      );
      
      if (chineseVoice) {
        utterance.voice = chineseVoice;
      } else {
        // Fallback to Google Translate TTS
        const fallbackUrl = `https://translate.google.com/translate_tts?ie=UTF-8&tl=zh-CN&client=tw-ob&q=${encodeURIComponent(text)}`;
        const audio = new Audio(fallbackUrl);
        audio.play().catch(console.error);
        return;
      }
      
      utterance.lang = 'zh-CN';
      utterance.rate = 0.8;
      
      window.speechSynthesis.speak(utterance);
    } else {
      toast({
        title: "Kh√¥ng h·ªó tr·ª£ ph√°t √¢m",
        description: "Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ t√≠nh nƒÉng ph√°t √¢m.",
        variant: "destructive"
      });
    }
  };

  const callOpenRouterAPI = async (message: string): Promise<string> => {
    try {
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': window.location.origin,
          'X-Title': 'Chinese Tutor Bot'
        },
        body: JSON.stringify({
          model: 'tngtech/deepseek-r1t2-chimera:free',
          messages: [
            {
              role: 'system',
              content: `B·∫°n l√† Th·∫ßy Qu√¢n, gi√°o vi√™n ti·∫øng Trung chuy√™n nghi·ªáp v√† th√¢n thi·ªán. H√£y d·ªãch c√¢u h·ªèi c·ªßa h·ªçc sinh sang ti·∫øng Trung (k√®m pinyin), gi·∫£i th√≠ch t·ª´ v·ª±ng quan tr·ªçng v√† ƒë∆∞a 1-2 v√≠ d·ª• th·ª±c t·∫ø. 
              
              ƒê·ªãnh d·∫°ng tr·∫£ l·ªùi:
              
              üá®üá≥ **Ti·∫øng Trung:** [C√¢u ti·∫øng Trung]
              üìù **Pinyin:** [Phi√™n √¢m pinyin]
              üí° **Gi·∫£i th√≠ch:** [Gi·∫£i th√≠ch t·ª´ v·ª±ng v√† ng·ªØ ph√°p]
              üìö **V√≠ d·ª•:** [1-2 v√≠ d·ª• th·ª±c t·∫ø]
              
              H√£y tr·∫£ l·ªùi m·ªôt c√°ch nhi·ªát t√¨nh v√† khuy·∫øn kh√≠ch h·ªçc sinh h·ªçc t·∫≠p.`
            },
            {
              role: 'user',
              content: message
            }
          ],
          temperature: 0.7,
          max_tokens: 800
        }),
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0]?.message?.content || 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. H√£y th·ª≠ l·∫°i!';
    } catch (error) {
      console.error('OpenRouter API Error:', error);
      return 'Xin l·ªói, hi·ªán t·∫°i kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i!';
    }
  };

  const handleSetName = () => {
    if (inputValue.trim()) {
      setUserName(inputValue.trim());
      setIsNameSet(true);
      setInputValue('');
      
      // Add welcome message
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        content: `Ch√†o ${inputValue.trim()}! T√¥i l√† Th·∫ßy Qu√¢n, gi√°o vi√™n ti·∫øng Trung c·ªßa b·∫°n. C√πng nhau h·ªçc ti·∫øng Trung m·ªôt c√°ch th√∫ v·ªã nh√©! ‰Ω†Â•ΩÔºÅÊ¨¢ËøéÊù•Âà∞ÊàëÁöÑ‰∏≠ÊñáËØæÂ†ÇÔºÅ`,
        sender: 'bot',
        timestamp: new Date()
      };
      
      setMessages([welcomeMessage]);
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue.trim(),
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const botResponse = await callOpenRouterAPI(userMessage.content);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error:', error);
      toast({
        title: "L·ªói k·∫øt n·ªëi",
        description: "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i!",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      if (!isNameSet) {
        handleSetName();
      } else {
        handleSendMessage();
      }
    }
  };

  const extractChineseText = (content: string): string[] => {
    // Extract Chinese text between ** markers or find Chinese characters
    const chineseRegex = /[\u4e00-\u9fff]+/g;
    const matches = content.match(chineseRegex) || [];
    return matches;
  };

  return (
    <div className="min-h-screen bg-gradient-soft flex items-center justify-center p-4">
      <Card 
        className="w-full max-w-[380px] flex flex-col shadow-soft rounded-b-xl bg-card" 
        style={{ height: '500px' }}
      >
        {/* Header */}
        <div className="bg-gradient-chinese text-primary-foreground p-4 rounded-t-xl">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-chinese-gold/20 flex items-center justify-center">
              <Bot className="w-6 h-6" />
            </div>
            <div>
              <h3 className="font-semibold text-lg">Th·∫ßy Qu√¢n</h3>
              <p className="text-sm opacity-90">Gi√°o vi√™n ti·∫øng Trung</p>
            </div>
          </div>
          {isNameSet && userName && (
            <div className="mt-2 p-2 bg-chinese-gold/10 rounded-lg">
              <p className="text-sm">Ch√†o {userName}, c√πng h·ªçc v·ªõi Th·∫ßy Qu√¢n nh√©! üá®üá≥</p>
            </div>
          )}
        </div>

        {/* Messages Area */}
        <ScrollArea className="flex-1 p-4">
          <div className="space-y-3">
            {!isNameSet && (
              <div className="flex gap-3">
                <div className="w-8 h-8 rounded-full bg-chinese-red flex items-center justify-center flex-shrink-0">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className="bg-chat-bot rounded-lg rounded-tl-none p-3 max-w-[280px]">
                  <p className="text-sm text-chinese-text">
                    Xin ch√†o! T√¥i l√† Th·∫ßy Qu√¢n. B·∫°n t√™n g√¨ v·∫≠y? üòä
                  </p>
                </div>
              </div>
            )}
            
            {messages.map((message) => (
              <div key={message.id} className={`flex gap-3 ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.sender === 'user' 
                    ? 'bg-primary' 
                    : 'bg-chinese-red'
                }`}>
                  {message.sender === 'user' ? (
                    <User className="w-4 h-4 text-white" />
                  ) : (
                    <Bot className="w-4 h-4 text-white" />
                  )}
                </div>
                <div className={`rounded-lg p-3 max-w-[280px] ${
                  message.sender === 'user'
                    ? 'bg-chat-user rounded-tr-none'
                    : 'bg-chat-bot rounded-tl-none'
                } ${message.sender === 'user' ? 'ml-8' : 'mr-8'}`}>
                  <div className="text-sm text-chinese-text whitespace-pre-wrap">
                    {message.content}
                  </div>
                  {message.sender === 'bot' && (
                    <div className="flex flex-wrap gap-1 mt-2">
                      {extractChineseText(message.content).map((chineseText, index) => (
                        <Button
                          key={index}
                          size="sm"
                          variant="outline"
                          className="h-6 px-2 text-xs"
                          onClick={() => speakChinese(chineseText)}
                        >
                          üîä {chineseText}
                        </Button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex gap-3">
                <div className="w-8 h-8 rounded-full bg-chinese-red flex items-center justify-center flex-shrink-0">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className="bg-chat-bot rounded-lg rounded-tl-none p-3">
                  <div className="flex items-center gap-1">
                    <div className="w-2 h-2 bg-chinese-red rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-chinese-red rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-chinese-red rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div ref={messagesEndRef} />
        </ScrollArea>

        {/* Input Area */}
        <div className="p-4 border-t">
          <div className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={!isNameSet ? "Nh·∫≠p t√™n c·ªßa b·∫°n..." : "H·ªèi Th·∫ßy Qu√¢n v·ªÅ ti·∫øng Trung..."}
              disabled={isLoading}
              className="flex-1"
            />
            <Button 
              onClick={!isNameSet ? handleSetName : handleSendMessage}
              disabled={isLoading || !inputValue.trim()}
              size="icon"
              className="bg-chinese-red hover:bg-chinese-red/90"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};